//
// Position
//

// Easily set an element's position and "trbl" values.
// Arguments: $type, $top, $right, $bottom, $left

// The long way: @include position(relative, 5px, 5px, 10px, 15px)
// Set absolute: @include absolute(10px, 25px, null, 50px)
// Set relative: @include relative(10px, 35px)
// Set fixed: @include fixed(null, null, 20px, 20px)

// Note: Pass null as the value if you don't want a "trbl" property to be set.

$position-default: null !default;

@mixin position($type,
                $top: $position-default,
                $right: $position-default,
                $bottom: $position-default,
                $left: $position-default) {
  position: $type;
  $allowed_types: absolute relative fixed;
  @if not index($allowed_types, $type) {
    @warn "Unknown position: #{$type}.";
  }
  @each $data in top $top, right $right, bottom $bottom, left $left {
    #{nth($data, 1)}: nth($data, 2);
  }
}
@mixin absolute($top: $position-default, $right: $position-default, $bottom: $position-default, $left: $position-default) {
  @include position(absolute, $top, $right, $bottom, $left);
}
@mixin relative($top: $position-default, $right: $position-default, $bottom: $position-default, $left: $position-default) {
  @include position(relative, $top, $right, $bottom, $left);
}
@mixin fixed($top: $position-default, $right: $position-default, $bottom: $position-default, $left: $position-default) {
  @include position(fixed, $top, $right, $bottom, $left);
}

// .element {
//   @include position(absolute,null,null,10px,15px);
// }
// .absolute-element {
//   @include absolute(null,25px,25px);
// }
// .relative-element {
//   @include relative(15px);
// }
// .fixed-element {
//   @include fixed(10px,50px);
// }

// Easily set an element's "trbl" values
// -------------------------------------
@mixin trbl($top: $position-default,
                $right: $position-default,
                $bottom: $position-default,
                $left: $position-default) {
  @each $data in top $top, right $right, bottom $bottom, left $left {
    #{nth($data, 1)}: nth($data, 2);
  }
}
@mixin top-left {
  @include trbl(0,null,null,0);
}
@mixin top-right {
  @include trbl(0,0);
}
@mixin bottom-left {
  @include trbl(null,null,0,0);
}
@mixin bottom-right {
  @include trbl(null,0,0,null);
}

.a-top-right {
  @include absolute(0,0,null,null);
}

.a-top-left {
  @include absolute(0,null,null,0);
}

.p-relative {
  position: relative;
}

.d-block {
  display: block;
}

.d-inline {
  display: inline;
}

.d-inline-block {
  display: inline-block;
}

.margin-center {
  display: block;
  margin: 0 auto;
}

.pr-vert-align {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}

.tb-table {
  display: table;
  width: 100%;
}

.tb-vert-align {
  display: table-cell;
  vertical-align: middle;
}

.content {
  &.with-sticky-header {
    margin-top: rem-calc(114);

    @include breakpoint(medium up) {
      margin-top: rem-calc(92);
    }
  }
  &.with-hero {
    margin-top: rem-calc(114);

    @include breakpoint(medium up) {
      margin-top: rem-calc(56);
    }
  }
}
